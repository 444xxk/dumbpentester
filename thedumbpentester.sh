#!/bin/bash
#Input : domain or ips attacked / Output : Pentest results
#OS Kali 2
#db used : dir and txt files
# Credits:
# Various open source authors of the tools used here
# Similar tools : 1n3 Sniper , Discover script

### COLORS
BLUE='\033[94m'
RED='\033[91m'
GREEN='\033[92m'
ORANGE='\033[93m'
NOCOLOR='\e[0m'

######################### VARIABLES
starttime=$(date);
scriptstartdir=$(pwd);
savedir="$HOME/.dumbpentester";
gitdir="$savedir/githubs";
#modes
targetmode="default";
#Hydra additional protocols list
hydraadditionalprotocol=(asterisk cisco cisco-enable firebird icq nntp oracle-listener pcnfs postgres rdp rsh rtsp s7-300 smtp-enum socks5 teamspeak)
hydrafullprotocol=(asterisk cisco cisco-enable cvs firebird ftp ftps http http-proxy http-proxy-urlenum icq imap irc ldap2 ldap3  mssql mysql nntp oracle-listener oracle-sid pcanywhere pcnfs pop3 postgres rdp redis rexec rlogin rsh rtsp s7-300 sip smb smtp smtp-enum snmp socks5 ssh sshkey svn teamspeak telnet vmauthd vnc xmpp
)
#Usernames and passwords db
usernames="/usr/share/nmap/nselib/data/usernames.lst";
passwords="/usr/share/nmap/nselib/data/passwords.lst";
#OpenVAS API vars
vasapi=$6;
vasuser=$7;
vaspass=$8;
#torsocksornot="" # legacy
########################## END VARIABLES


#### LOGO credits goes to ascii art ad artist
clear;
cat << "EOF"

       __________
      / _ \ =  = \
   __/_|_|_\______\__   ad

Raketenstation 13PF-37
Somewhere on the internet ...


EOF
#
echo -e ""
echo -e "      $BLUE[ $ORANGE The D.U.M.B. pentester Rocket script v0.7 'passwordy' $BLUE ]";
echo -e "$BLUE Purpose: Fire and forget script automating the finding of targets vulnerabilities.";
echo -e "$BLUE Concepts of the tool:";
echo -e "$BLUE    1. Everything should be $RED automatic.";
echo -e "$BLUE     2. Use only $RED open source $BLUE tools.";
echo -e "$BLUE      3. Report contains $RED only useful information $BLUE for direct exploitation.";
echo -e "$BLUE       Other requirement: the tool might be used over $GREEN ToR $BLUE with the $ORANGE [STEALTH] $BLUE scanmode.";
echo -e ""
echo -e "$ORANGE Usage: $NOCOLOR $0  [domain.com/IP/companyname$ORANGE/maintenance$NOCOLOR] [targetmode:company/domain/ip] $ORANGE [scanmode] [web] $NOCOLOR [*user wordlist*] [*password wordlist*] [openVASurl:port] [openVASuser] [openVASpassword] [debug] [noadditionalbrute] $GREEN"
#                                $0                          $1                                         $2                             $3      $4                 $5                    $6                      $7           $8              $9          $10           $11
echo -e ""
echo -e "$NOCOLOR Scan modes are: $RED fast $GREEN stealth $BLUE recononly $ORANGE [default] $ORANGE extended $BLUE reportonly $RED userassisted $NOCOLOR"
echo -e "Example1: $0 maintenance"
echo -e "Example2: $0 target.com domain fast web"
echo -e "Example3: $0 target.net";
echo -e "Example3: $0 target.net domain stealth";
echo -e "";
echo -e "$ORANGE [UNDER CONSTRUCTION / NOT WORKING]: [STEALTH] scanmode, [company] targetmode, [ip] targetmode, openVASapi vulnscan . git pull and check again later :] $NOCOLOR"
echo -e "";


##################### TEST FIRST RUN
function firstruntest {
if [ ! -f "$savedir"/.firstrun ]; then echo -e "$BLUE First time you run this script, doing maintenance for you, restart me right after."; maintenance; fi;
}
##################### END FIRST RUN



##################### MAINTENANCE
function maintenance {
echo -e "$ORANGE [MAINTENANCE] $BLUE mode engaged."
echo -e "$BLUE Collecting Rocket parts... (Dependencies check)";
apt install -y  cewl cupp curl dnsrecon dnsutils fierce git hydra dirb sqlmap libxml2-utils masscan nmap pompem python-pip python seclists whatweb whois wpscan testssl.sh theharvester tor wget;
echo -e "$BLUE Updating Rocket firmware... (Updating searchsploit to have fresh exploits)";
searchsploit -u;

echo -e "$BLUE Generating Rocket dictionnaries... (Preparing small wordlist of 3chars for bruting)"
crunch 1 3 > "$savedir/3char.wordlist";

echo -e "$BLUE Installing and mounting side weapons... (Useful tools not in Kali repos)"
mkdir -p "$savedir/githubs";

# Sublist3r install
cd "$gitdir";
# TODO need to check if it exists already and if yes, git pull
git clone https://github.com/aboul3la/Sublist3r;
cd "Sublist3r/";
git pull;
pip install -r requirements.txt;

#Subbrute install
cd "$gitdir";
git clone https://github.com/TheRook/subbrute;

#CMSMap install
#cd $savedir/githubs;
#git clone https://github.com/Dionach/CMSmap;

# winshocks install
# cd $savedir/githubs;
# git clone https://github.com/anexia-it/winshock-test

cd "$gitdir";
git clone https://github.com/BishopFox/spoofcheck;
cd "spoofcheck";
git pull;
pip install -r requirements.txt;

# yasuo install
# git clone https://github.com/0xsauby/yasuo
# gem install ruby-nmap net-http-persistent mechanize text-table sqlite3

# useless for dorks and metacrawler sadly
#echo -e "$RED Please enter your API key for configuring reconng";
# reconng commands to add API key {echo ""};

clear;
echo -e "$RED DUMBPentester Rocket lock and loaded. Ready to fire at will !";
echo "done" > "$savedir"/.firstrun;
exit 0;
};
##################### END MAINTENANCE




##################### PRE START WORK
function prestart {
# shellcheck disable=SC1091
. torsocks off;
echo -e "$BLUE Deactivating $GREEN ToR $BLUE, if you were using it. If you want this scan to go through $GREEN ToR $BLUE use the $ORANGE[STEALTH]$BLUE scanmode.";
iptables -P INPUT ACCEPT;
iptables -P FORWARD ACCEPT;
iptables -P OUTPUT ACCEPT;
iptables -t nat -F;
iptables -t mangle -F;
iptables -F;
iptables -X;
# Attacked domain recap
domainattacked=$1;
echo -e "$BLUE Target domain under attack is : $RED $domainattacked !";
# Preparing folders
echo -e "$BLUE Results will be saved to $savedir/$domainattacked.";
mkdir -p "$savedir/$domainattacked";
mkdir -p "$savedir/$domainattacked/userpasswords";
userdir="$savedir/$domainattacked/userpasswords";
mkdir -p "$savedir/$domainattacked/output";
outputdir="$savedir/$domainattacked/output";
mkdir -p "$savedir/$domainattacked/files";
filedir="$savedir/$domainattacked/files";
mkdir -p "$savedir/$domainattacked/vulns";
vulndir="$savedir/$domainattacked/vulns";
# Preparing firewall for stealth mode
if [ "$scanmode" == "stealth" ]; then
# iptables rules from ToR project website
echo -e "$ORANGE [STEALTH] $BLUE mode confirmed."
service tor start;
echo -e "$RED We will patch your Firewall through iptables rules for $ORANGE[STEALTH]$RED mode, please restore them afterward if you need to restore connectivity without ToR. We will print your current rules:"
iptables -L -v; #print
iptables -F OUTPUT; # clean
iptables -A OUTPUT -j ACCEPT -m owner --uid-owner debian-tor; # only debian tor user is accepted
iptables -A OUTPUT -j ACCEPT -o lo; #used to allow traffic over the loopback device and is told to be safe
iptables -P OUTPUT DROP; # drop
echo -e "$RED New iptables rules:"
iptables -L -v; # print
echo -e "$GREEN Now putting torsocks on everything";
# shellcheck disable=SC1091
. torsocks on;
fi;
}
###################### END PRE START WORK



function stealthrecon
{

echo "$ORANGE UNDER CONSTRUCTION";
  # ithink the recon is so different that we need a function for it
#dig +tcp @opennicdns $domainattacked NS +short

nservers=$(dig +short @OpennicDNS "$domainattacked" NS | grep '\.');

proxychains nmap -p53 -sT --script=dns-brute --script-args="dns-brute.domain=$domainattacked,dns-brute.srv=1"  -Pn

# getting SPF and other records
dig +tcp +short "$domainattacked" TXT > "$outputdir/$domainattacked.spf";



}

######################## START RECON / OSINT PART
function domainrecon
{
# test already done
if [ -f "$savedir/$domainattacked/.$domainattacked.recondone" ]; then
echo -ne "$BLUE We already made a recon on this target on: $ORANGE $(cat "$savedir/$domainattacked/.$domainattacked.recondone") $BLUE. Do you want to make a new recon flight (Recon the domain again)? [Y/N]:   ";
read -r answer;
if [ "$answer" == "N" ]; then return; fi;
fi;

# DOMAIN MODE
# I need to debug and recheck 100% the stealth mode with ". torsocks on" method, torsocks removed in front of binaries for now

cd "$savedir/$domainattacked" || (echo "cd to $savedir/$domainattacked failed" && exit 1);

# remove fierce prompts
rm "$outputdir"/*.fierce;

echo -e "$BLUE Mapping the targets from the sky... (Starting multiple DNS enum tools).";

# get main ip, + tcp on dig for torsocks / stealth mode
dig +short "$domainattacked" > "$domainattacked.mainip";

# use IP ranges from fierce to reverse PTR check, we are lazy yet to compute CIDR and use /24 by default
fierce -dns "$domainattacked" -tcptimeout 13 -file "$outputdir/$domainattacked.fierce" -threads 2;
# extract IP ranges
grep 'hostnames found' "$outputdir/$domainattacked.fierce"  | grep -E -o "([0-9]{1,3}[\.-]){4}[0-9]{1,3}" | sort -u > ipranges.lst;
echo -e "$BLUE Our radar showed up interesting zones area... (IPs ranges are extracted. If you want to scan all IPs inside use the $ORANGE [EXTENDED] $BLUE scanmode).";

# Dnsrecon long timeout to avoid stoping on crash, dnsrecon.py is slowing us down but it has nice checks like auto SPF record and TLD
dnsrecon -d "$domainattacked" -t std,axfr,goo -s --lifetime 15 -c "$outputdir/$domainattacked.dnsrecon";
# Dnsrecon other TLDs and synonym TLDs
# if extended TLDs , cause it s a bit slow

sed 's/-255/\/24/' ipranges.lst | sort -u > ipranges.cidr;
# Reverse PTR range query
# i dont understand why but this synthax very often breaks the script and its a PITA T,T, since using lint its better
while read -r r; do dnsrecon -r "$r" -c "$outputdir/$domainattacked.rptr"; done < ipranges.cidr;

# deep reversewhois on dnsrecon if extended
if [ "$scanmode" == "extended" ]; then
echo "a" | dnsrecon -d "$domainattacked" -w -c "$outputdir/$domainattacked.rwhois.dnsrecon";
fi ;

# now speed is greatly increasing ... i hope =D
echo -e "$BLUE Afterburner engine started... (Fast Subbrute.py started)";
# Subbrute , timeout 10m because sometines subbrute goes crazy and not exit / blocks very long time and then find strange domains
timeout 8m python "$gitdir/subbrute/subbrute.py" -r "$savedir/githubs/subbrute/resolvers.txt" -p "$domainattacked" -o "$outputdir/$domainattacked.subbrute";
# 3char brute should not take more than 7 min also
timeout 12m python "$gitdir/subbrute/subbrute.py" -s "$savedir/3char.wordlist" -r "$gitdir/subbrute/resolvers.txt" -p "$domainattacked" -o "$outputdir/$domainattacked.3char.subbrute";
#fierce -dns "$domainattacked" -tcptimeout 15 -file "$outputdir/$domainattacked.3char.fierce" -threads 2 -wordlist "$savedir/3char.wordlist";

# getting SPF and other records
dig +tcp +short "$domainattacked" TXT > "$outputdir/$domainattacked.spf";

# END dns enum
echo -e "$BLUE Main recon flight is over... (DNS recon is $ORANGE DONE.)";

# OSINT and info gathering
# Robtex graph
echo -e "$BLUE Taking a picture of the target from max altitude... (Getting graph of the domain $domainattacked infrastructure).";
wget -qO "$domainattacked.png" "https://gfx.robtex.com/gfx/graph.png?dns=$domainattacked";

# simple sublist3r enum, sometimes fail on https so timeout
timeout 3m python "$gitdir/Sublist3r/sublist3r.py" -d "$domainattacked" -o "$outputdir/$domainattacked.sublister";

# getting a traceroute for network device mapping
echo -e "$BLUE Sending a probe to the ground and tracing it... (traceroute TCP80 to detect network devices inbetween, hops > -1 can be added in $ORANGE [EXTENDED] $BLUE scan mode)"
traceroute -T -p80 "$domainattacked" > "$outputdir/$domainattacked.traceroute";

# start OSINT
echo -e "$BLUE Contacting high altitude friends Rockets ... (Harvesting OSINT info about domain)."

#harvester
theharvester -d "$domainattacked" -b all -v > "$outputdir/$domainattacked.harvester";

# reverseWhois based on contact mail of target and also storing info on emails to our db, sadly unexisting module in reconng ? whois poc is different
rm "$outputdir/$domainattacked.rwhois";
emails=$(whois -H "$domainattacked" | grep -v registrar | grep -E -o "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b" | sort -u);
echo -e "$BLUE Intel contacts links ... (Found emails for reversewhois) $emails";
echo "$emails" > "$userdir/emails.lst";
# rwhois on contact email using http://viewdns.info/reversewhois/?q=
for email in $emails; do curl "http://viewdns.info/reversewhois/?q=$email" > "$outputdir/$domainattacked.rwhois"; done;
# need to parse it better

# recon-ng scan starts here
{ echo "workspaces delete $domainattacked";
echo "workspaces add $domainattacked";
echo "workspaces select $domainattacked";
echo "add domains $domainattacked";

echo "use recon/domains-hosts/hackertarget";
echo "run";
echo "use recon/domains-hosts/certificate_transparency";
echo "run";
echo "use recon/domains-hosts/ssl_san";
echo "run";
echo "use recon/domains-hosts/threatcrowd";
echo "run";
echo "use recon/domains-hosts/netcraft";
echo "run";
echo "use recon/domains-vulnerabilities/xssed";
echo "run";
echo "use recon/domains-vulnerabilities/xssposed";
echo "run";
echo "use recon/domains-contacts/whois_pocs";
echo "run";
#capcha requried here so need to decide what to do
#echo "use recon/domains-vulnerabilities/ghdb";
#echo "set xxx TRUE";
#
#this requires capcha as well
#echo "use recon/domains-contacts/metacrawler";
#echo "set EXTRACT True";
#echo "run";
# output to files now
echo "use reporting/csv";
echo "set FILENAME $vulndir/xss.reconng ";
echo "set TABLE vulnerabilities";
echo "run";
echo "set FILENAME $userdir/users.reconng ";
echo "set TABLE contacts";
echo "run";
echo "set FILENAME $outputdir/$domainattacked.reconng ";
echo "set TABLE hosts";
echo "run";
# workspaces is failing i dont know why
echo "back";
echo "workspaces select default";
echo "workspaces delete $domainattacked";
echo "back";
echo "exit";
# workspaces command has an issue idk why
#echo "workspaces select default";
#echo "workspaces delete $domainattacked";
} > "$outputdir/scan.reconng";

# run reconng
recon-ng -r "$outputdir/scan.reconng";
# bugfix
# recon-ng -r "$outputdir/clean.recon-ng";

echo -e "$BLUE Info on targets acquired... (Enumerating info and OSINT ... $RED DONE $BLUE)";
### End of OSINT

# cewl
# dumb mode password gathering
cewl -d 2 -m 5 -w "$userdir/potentialpass.cewl" "http://$domainattacked";
cewl -d 2 -m 5 -w "$userdir/potentialpass2.cewl" "http://www.$domainattacked";
cewl -d 2 -m 5 -w "$userdir/potentialpass3.cewl" "https://$domainattacked";
cewl -d 2 -m 5 -w "$userdir/potentialpass4.cewl" "https://www.$domainattacked";


### Vuln test on domain here
#
python "$gitdir/spoofcheck/spoofcheck.py" "$domainattacked" > "$vulndir/spoofemail.spoofcheck";


# Start of organizing info for later (temp_ files)

# build IPs list
# Collecting simple IPs list from brute domain tools
{  grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}" "$outputdir"/*.dnsrecon | sort -u;
grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}" "$outputdir"/*.subbrute | grep -v 'NXDOMAIN' | sort -u;
grep -E -o "([0-9]{1,3}[\.-]){3}[0-9]{1,3}" "$outputdir"/*.fierce | grep -v 'hostnames found' | sort -u; } > "$outputdir/temp_ips.lst";
# more IPs from OSINT
{ grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}" "$outputdir"/*.sublister  | sort -u;
grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}"  "$outputdir"/*.harvester | sort -u; } >> "$outputdir/temp_ips.lst";
# Adding last device before target main IP as target
tail -n 2 "$outputdir/$domainattacked.traceroute" | grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}" >> "$outputdir/temp_ips.lst";
# taking IP of hosts found with reconng
while read -r subdomain; do dig +tcp +short "$subdomain" >> "$outputdir/temp_ips.lst"; done < "$outputdir/$domainattacked.reconng";
# Extending IPs in EXTENDED mode
# Checking similar TLDs
if [ "$scanmode" == "extended" ]; then
echo "Extending to other TLDs and traceroute hops";
grep "$(cat "$savedir/$domainattacked.mainip")" "$domainattacked.otherTLDs" > "$outputdir/$domainattacked.similarTLDs";
nmap -sL ipranges.lst | cut -d -f >> "$outputdir/temp_ips.lst";
# EXTENDING to hop > -1+ traceroute
tail -n 3 "$outputdir/*.traceroute" | grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}" >> "$outputdir/temp_ips.lst";
fi;


# Build subdomains list
# Collecting subdomains linked to IPs in CSV format for further use, like vhost
{
# dnsrecon
tail -n+2 "$outputdir/"*.dnsrecon | awk -F $',' '{ $1 = $2; $2 = $3; print $1,$2;}' OFS=$','; # ok
tail -n+2 "$outputdir/"*.rptr | grep "$domainattacked" | awk -F $',' '{ $1 = $2; $2 = $3; print $1,$2;}' OFS=$','; # ok
# subbrute
cat "$outputdir"/*.subbrute | grep ',A,' | awk -F $',' '{ $2 = $3; print $1,$2;}' OFS=$',';
# fierce
#grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}" "$outputdir"/*.fierce | awk ;
# sublist3r
#
# reconng
#
# harvester
#
} > "$outputdir/temp_domains.lst";


# Build userlist / emails list
{
  grep "@$domainattacked" "$outputdir/$domainattacked.harvester"| sort -u;


} > "$userdir/temp_emails.lst";

# transforming emails into username
awk -F@ '{ print $1; }' "$userdir/temp_emails.lst" | tr '.' ',' >> "$userdir/potentialusers.csv";


# Build passwords list
cat "$userdir"/*.cewl | sort -u >> "$userdir/$domainattacked.wordlist";


## FINAL STEP / PREPARING DATA
# PREPARING the IPs list, double checking error with another grep and sort -u
grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}" "$outputdir/temp_ips.lst" | sort -u > "$savedir/$domainattacked/ips.lst";

# PREPARING the domains list, double checking errors with another grep and sort -u
# need domain regex here
sort -u "$outputdir/temp_domains.lst" > "$savedir/$domainattacked/domains.csv";
rm "$outputdir/temp_domains.lst";

# PREPARING the emails and user list
sort -u "$userdir/temp_emails.lst"  | grep -E -o "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b" > "$userdir/emails.lst";
# extract names
rm "$userdir/temp_emails.lst";
# extract user names from emails

# PREPARING the password list
# sort -u
# cat dorks.passords | sort -u
# cat reconng passwords


## EXTRA INFO
# WHOIS ips.lst to show ownership
# TODO remove unwanted IPs and garbage
while read -r line; do echo -n "$line belongs to: " >> "$outputdir/$domainattacked.whois" && whois "$line" | grep -i mail >> "$outputdir/$domainattacked.whois"; done < "$savedir/$domainattacked/ips.lst";


# CLEANING temp files, useless now ?
#rm "$savedir/$domainattacked"/temp_*;
#rm "$outputdir"/temp_*;


date > "$savedir/$domainattacked/.$domainattacked.recondone";

# recon done
cat << "EOF"
    ___           __
 __(  ))     -    \ \________
(__(    )  -      ###[==_____ >     (( . )) RECON OVER ... OVER.
   (_____))    -  /_/

EOF


echo -e "$BLUE You can get more OSINT information by re-running and assisting the script with solving CAPCHAs in the $ORANGE[USERASSISTED] $BLUE scanmode. However, you will need to look at it while scanning."
echo -e "$BLUE Recon mission is over... collected IPs, domains, OSINT / public vulnerabilities, potential emails, users and passwords... Extract of collected info on targets:";
echo -e "$RED Domains and IPs...";
head "$savedir/$domainattacked/domains.csv";
# vulns
echo -e "$RED Potential users ...";
head "$userdir/potentialusers.csv";
echo -e "$RED Potential passwords ...";
head "$userdir/$domainattacked.wordlist";

echo -e "$BLUE Results of the mission are stored in $savedir/$domainsattacked in files ips.lst domains.lst and $vulndir for vulnerabilities.";

}
#######################  STOP RECON / OSINT PART




####################### START IP RECON PART
function userassisted
{
echo -e "$ORANGE[UNDER CONSTRUCTION]";
echo -e "$RED Please solve CAPCHA from now, this is going to be long so take your time and some coffees...";
{ echo "workspaces add $domainattacked";
echo "use recon/domains-contacts/metacrawler";
echo "run";
# SOLVE CAPCHA
echo "recon/domains-vulnerabilities/ghdb";
# enable only vuln / usefull ones
echo "set GHDB_ADVISORIES_AND_VULNERABILITIES true";
echo "set GHDB_FILES_CONTAINING_JUICY_INFO true";
echo "set GHDB_FILES_CONTAINING_PASSWORDS true";
echo "set GHDB_FILES_CONTAINING_USERNAMES true";
echo "set GHDB_FOOTHOLDS true";
echo "set GHDB_NETWORK_OR_VULNERABILITY_DATA true";
echo "set GHDB_VULNERABLE_FILES true";
echo "set GHDB_VULNERABLE_SERVERS true";
echo "run";
# SOLVE CAPCHA here
echo "use export/csv";
echo "set FILENAME $userdir/metausers.reconng ";
echo "set TABLE contacts";
echo "run";
echo "set FILENAME $vulndir/dorks.reconng ";
echo "set TABLE vulnerabilities";
echo "run";
echo "workspaces delete $domainattacked";
echo "back";
} > "$outputdir/userassisted.reconng";

recon-ng -r userassisted.reconng;

exit 0;
}
###################### STOP IP RECON PART


####################### START company RECON PART
function iprecon
{
echo -e "$ORANGE UNDER CONSTRUCTION";
exit 0;
}
###################### STOP company RECON PART



###################### START SERVICES SCAN PART
function portscan
{
# temp files saving in pwd for masscan in case of cancel
cd "$savedir/$domainattacked" || (echo "Change dir to $savedir/$domainattacked failed" && exit 1);
echo -e "$BLUE Known targets for $RED $domainattacked $BLUE are ... (Start scans on :)"
cat "$savedir/$domainattacked/ips.lst";

# switch case scan mode here ?

#### MASSCAN should not be done on stealth or fast mode
if [ ! "$scanmode" == "fast" ] || [ ! "$scanmode" == "stealth" ]; then masscan -p1-65535 -iL "$savedir/$domainattacked/ips.lst" -oX "$outputdir/$domainattacked.masscan"; fi;

#### SERVICES ENUM FINGERPRINT + NSE VULN PART
# main loop for IP
#for ip in $(cat ips.lst); do
while read -r ip; do
### create a dir per IP for db txt files
 mkdir -p "$savedir/$domainattacked/$ip";
 echo -e "$BLUE Scanning the target, let me work for a while... (Enumerating ports and services, vuln scanning and first brute forcing on $RED $ip $BLUE )";

### nmap scanning modes ...

### default
# STANDARD SCAN top 3000k ports = 95 % of ports covered accoding to stats
# TCP Connect scan, to avoid SYN flood protection/iptables TBC if its useful with a masscan happening before
 if [ "$scanmode" == "standard" ]; then
 nmap -sTV --top-ports=3000 --script="(default or vuln or auth or brute or discovery or intrusive) and not (broadcast or dos)" --script-args="unsafe=1,userdb=$usernames,passwd=$passwords" --host-timeout=180m --max-hostgroup=1 -Pn "$ip" -oA "$savedir/$domainattacked/$ip/TCPresults";
# UDP top1000
 nmap -sUV --script="(default or vuln or auth or brute or discovery or intrusive) and not (broadcast or dos)" --script-args="unsafe=1,userdb=$usernames,passwd=$passwords" --host-timeout=180m --max-hostgroup=1 -Pn "$ip" -oA "$savedir/$domainattacked/$ip/UDPresults"; fi;
### end default

# EXTENDED scan very very very long but cover all
 if [ "$scanmode" == "extended" ]; then
# here optimize scanning based on masscan if available
# $(grep open $ip/tcpports.masscan | cut -d '"' -f10 | tr '\n' ',')
 nmap -sSU -p T:1-65535,U:7,9,11,13,17,19,20,37,39,42,49,52-54,65-71,81,111,161,123,136-170,514-518,630,631,636-640,650,653,921,1023-1030,1900,2048-2050,27900,27960,32767-32780,32831 -sV -O --script="(default or vuln or auth or brute or intrusive or discovery) and not (broadcast or dos)" --script-args="unsafe=1,userdb=$usernames,passwd=$passwords" --host-timeout=360m --max-hostgroup=1 -Pn "$ip" -oA "$savedir/$domainattacked/$ip/TCPUDPresults";  fi;

# STEALTH / TOR SCAN slow as hell so TCP top ports 1000 only
 if [ "$scanmode" == "stealth" ]; then
 nmap -sT --top-ports=1000 -sV -O --script="(default or vuln or auth or brute or discovery) and not (broadcast or dos)" --script-args="unsafe=1,userdb=$usernames,passwd=$passwords" --host-timeout=180m --max-hostgroup=1 -Pn -v "$ip" -oA "$savedir/$domainattacked/$ip/TCPresults"; fi;

# FAST SCAN reduced time
 if [ "$scanmode" == "fast" ]; then
 nmap -A --host-timeout=30m --max-hostgroup=1 -Pn "$ip" -oA "$savedir/$domainattacked/$ip/TCPresults"; fi;

 echo -e "$BLUE Main scanning over... (Enum, Nmap fingerprinting and NSE for $RED $ip $BLUE ... $ORANGE DONE";


### Vulnerability scanner using OpenVAS API
# TODO vuln scan with openVAS

### Vulnerability scanner using metasploit aux scanner (for modules not already tested by nmap)
# TODO vuln scan with msf

# TODO service / version detection for smarter brute force and smarter pompem
 # echo "[UNDER CONSTRUCTION] Smart protocol detection for hydra ..."
 # cat nmapresults.xml | grep "port protocol" | cut -d '"' -f12

# Vulnscan OSINT
# Getting nmap CPE version of services and using Searchsploit
# REPORT services version and cleaning the file

 # Get pompem vuln search with cpe and exploitserch
 # preparing services banner
 while read -r z; do echo "$z" | grep -ozP "(?s)<cpe>.*?(?=</cpe>)" >> "$savedir/$domainattacked/$ip/version.services" && echo "" >> "$savedir/$domainattacked/$ip/version.services"; done < "$(grep '<cpe>' "$savedir/$domainattacked/$ip"/*results.xml)";
 # removing old finding
 rm "$savedir/$domainattacked/$ip/exploits.pompem";
 rm "$savedir/$domainattacked/$ip/exploits.exploitsearch";
 # looping around services
 while read -r service; do
 pompem -s "$service" >> "$ip/exploits.pompem";
 curl "http://www.exploitsearch.net/json.php?q=$service" >> "$savedir/$domainattacked/$ip/results.exploitsearch";
 done < "$ip/version.services";

# REPORT exploitdb search from nmap
 echo -e "$BLUE Searching exploitdb interesting vulnerabilities for target $ip ...";
 rm "$ip/"*services.exploits;
 searchsploit -v --nmap "$savedir/$domainattacked/$ip/TCPresults.xml" > "$savedir/$domainattacked/$ip/tcpservices.exploits";
 searchsploit -v --nmap "$savedir/$domainattacked/$ip/UDPresults.xml" > "$savedir/$domainattacked/$ip/udpservices.exploits";


# TODO add vulnsearch API or web form
# TODO add simple google blog search to find an exploit.

 echo -e "$BLUE Scanner has no more battery power... (Enumerating ports and services, fingerprinting, vuln scanning $RED DONE $BLUE).";

done < "$savedir/$domainattacked/ips.lst";
}
##################### STOP SERVICES PART




############################# START EXTRA BRUTE
function brute
{
cd "$savedir/$domainattacked";
# NMAP brute with potential user + weak pass
# NMAP brute with potential user + potential pass
while read -r ip; do

# Test default password for the device
# TODO optimize per port protocol detection
 echo -e "$BLUE Testing factory settings on target... (Starting default passwords tests on device)";
 grep Device "$ip"/*results.nmap | grep cpe | cut -d ':' -f7-8 > "$savedir/$domainattacked/$ip/device.type";
 for x in $(cut -d ':' -f3-4 "$ip/version.services" | tr ':' '\n'); do grep -i -w "$x" /usr/share/seclists/Passwords/default-passwords.csv >> "$savedir/$domainattacked/$ip/device.passwords"; done;
# Brute with hydra default pass
 for prot in "${hydrafullprotocol[@]}"; do hydra -C "$ip/device.passwords" -o "$vulndir/$ip.hydra.found" "$prot://$ip"; done;


#### Brute force not covered by Nmap :/
# TODO optimtize per port protocol detection here we are bruting all protocols no matter what and relies on hydra fails
 echo -e "STARTING additional brute force with hydra (ie brute not performed by nmap).";
 # this needs optimization
 for prot in "${hydraadditionalprotocol[@]}"; do hydra -L "$usernames" -P "$passwords" -o "$ip/validuserpass.hydra" "$prot://$ip"; done;

done < "$savedir/$domainattacked/ips.lst";


 echo -e "$BLUE Burned all my extra fuel on the target... (Additional brute force $RED DONE $BLUE.";

}
################### STOP EXTRA BRUTE



##################### START SSL Scan

function sslscan
{
  # massbleed script  ?
while read -r ip; do
 while read -r port; do
 testssl -U "$ip:$port";
# winshock bash
 done < "$(grep '/tcp' "$ip/TCPresults.nmap" | grep 'ssl' | cut -d '/' -f1)";
done < "$savedir/ips.lst";
}



##################### STOP SSL Scan




###################### START WEB PART
function webscan
{
# consider yasuo script

while read -r ip; do
#### WEB VULNS PART
 echo -e "$BLUE Web pentesting on $ip now ...";
# vhost enum
 echo -e "$BLUE Searching sister sites of your target... (Vhost enumerating)";

 {
# adding the IP as vhost, basic but often forgotten
 echo "$ip" > "$ip/vhost.list";
# reverse PTR on our dbs
 grep "$ip" "$outputdir/$domainattacked.dnsrecon" | grep '^A' | cut -d ',' -f2;
# reverse PTR , on OpennicDNS [DE] hardcoded   @5.9.49.12 ? or using system dns
 dig +tcp +short -x "$ip";
# using robtex from nmap to list vhosts
 awk '/hostmap-robtex/{f=1;next} /ip-geolocation-geoplugin/{f=0} f' "$ip/TCPresults.nmap"; # extract vhosts from NMAP robtex script
# adding hackertarget api to list vhosts, its already done by reconng no ?
 timeout 3m curl "http://api.hackertarget.com/reverseiplookup/?q=$ip";
 # harvester vhost
 grep -v "bing.com" "$domainattacked.harvester" | grep -v ":" | grep "$ip" | cut -f2;
} >> "$ip/vhost.list";
# adding reconng vhost
# cat "$"

# sorting vhosts and cleaning up timeout and errors
 grep -iv 'connection timed out\|host unreachable\|connection refused\|proxychains\|no records\|network unreachable' "$ip/vhost.list" | sort -u > "$ip/vhost.sorted";


echo -e "$BLUE Start port loop for host $RED $ip";

# if HTTP port test
 while read -r port;   # start port loop
	### WEB RECON
  #
  do echo -e "$BLUE Start vhost loop for $ip over port : $port";
  while read -r vhost; # start vhost loop
	# dirb  for each vhost
   do dirb "http://$vhost:$port" -S -f -l > "$ip/$vhost.$port.dirb";
    # add one more dirb with .code extention (.php , .asp ...) and custom dictionnary ?
  	### WEB fingerprint used for .X extension detection
   whatweb -a 3 -v "http://$vhost:$port";
   cutycapt --url "http://$vhost:$port" --out="$ip/$vhost.$port.picture"

	# arachni
   # need to copy paste my super killer arguments for arachni
   arachni "http://$vhost:$port" --authorized-by 'yourIT' --timeout 01:00:00 --output-only-positives --scope-include-subdomains --http-request-concurrency 5 --browser-cluster-ignore-images --report-save-path "./$ip/" --http-user-agent "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.71 Safari/537.36";
   # ok we need to add the autobrute of form and 401 and the login_script auto detection , ie. the scanner automatically brute force form , logs valid user / password , keeps connection with this user / pass
   # arachni auto brute is a must have

	# sqlmap for earch vhost

   sqlmap -u "http://$vhost:$port" -o --forms --crawl=2 --output-dir="$ip/" --flush-session --batch --fresh-queries --random-agent --users --passwords --output-dir="$savedir$domainattacked/$ip/$vhost";

	# owasp zap API call
  # python call to owasp zap ?

  # with these 3 we should be good for xss, sqli and maybe lfi

        # commix
  # commix --batch -u http://$vost:$port  --crawl=2 --level=2


  # CMSmap ? in case its a well known CMS
  # not available in kaliOS 2 T.T

  # wpscan in case wp ?

   done < $(cat "$ip/vhost.sorted");   ## end VHOST loop
  done < $(grep '/tcp' "$ip/TCPresults.nmap" | grep ' http ' | cut -d '/' -f1); ## end PORT loop
done < "$savedir/$domainattacked/ips.lst"; # end IP loop

# if HTTPS port
# TO DO again
# copy pasta
#for y in cat $ip/nmapresults.nmap |  grep '/tcp' | grep 'ssl/http' | cut -d '/' -f1;
echo -e "$BLUE Finished probing the target sites. (Websites scanned $ORANGE DONE $BLUE)";
};
####################### WEB STOP





####################### REPORT START
# TODO make the report function better
function report
{
  # TODO improve a lot this part since guys find it useless for the moment
clear;
# some context first
# show infrastructure
firefox "$savedir/$domainattacked/$domainattacked.png" &

# show vulns
echo -e "$RED Found vulnerabilities ... : "

echo -e "$BLUE ... from OSINT"
# recong ng xss, dorks , domainspoof
cat "$vulndir/"*;

#NSE
echo -e "$BLUE ... from Vulnerability scanning.";
echo -e "$ORANGE NMAP NSE reporting [Under construction], need to check NSE false positives...";
grep -n --color "VULNER" -B1 "$savedir/$domainattacked"/*/*.nmap;
grep -n --color "valid" -B1 "$savedir/$domainattacked"/*/*.nmap;
echo -e "$BLUE You might also want to read the .nmap file with $ORANGE Zenmap $BLUE for better visibility.";
# zenmap *.nmap

# OpenVAS output here
# curl


# Brute finding
echo -e "$BLUE ... from Bruteforce";
echo -e "$BLUE Valid user / passwords found:";
cat "$vulndir"/*.found;
echo -e "";


# if web
echo -e "$BLUE ... from Web scanning";
# TODO Report web vulns
# arachni report
# sqlmap report
# owasp zap report


echo -e "$BLUE ... from SSL";


# echo -e "$BLUE ... from "



echo -e "$RED Report END."

}
########################### REPORT END





############################# MAIN FUNCTION / LOGIC
# DEBUG mode ON
# if [ "$8" == "debug" ]; then echo -e "$BLUE [DEBUG] mode ON. Number of arguments is $#" && debug=true; fi;

# no root uid mode test
if [ "$(id -u)" != "0" ]; then echo -e "$RED This rocket should be launched only as an authorized root user... (Please run this script as root for SYN and UDP scan mainly)."  && exit 1; fi;

# TODO need better parser of arguments, like case esac

# no required arguments
if [ $# -eq 0 ]; then echo -e "$RED [NO-TARGET] mode engaged. crashing in the sea... (Please provide something to pentest)." && exit 1; fi

# test if running for first time
firstruntest;

# MAINTENANCE mode
if [ "$1" == "maintenance" ]; then maintenance; fi;

#reading scanmode
scanmode="$3";

#prepare folders and variables
prestart "$1";

# now serious stuff

echo -e "$NOCOLOR";
cat << "EOF"

                                         ,:
                                       ,' |
                                      /   :
                                   --'   /
                                   \/ />/
                                   / <//_\
                                __/   /
                                )'-. /
                                ./  :\
                                 /.' '
                               '/'
                               +
                              '
                            `.
                        .-"-
                       (    |
                    . .-'  '.
                   ( (.   )8:
               .'    / (_  )
                _. :(.   )8P  `
            .  (  `-' (  `.   .
             .  :  (   .a8a)
            /_`( "a `a. )"'
        (  (/  .  ' )=='
       (   (    )  .8"   +
         (`'8a.( _(   (
      ..-. `8P    ) `  )  +
    -'   (      -ab:  )''
EOF
#

# FIRE
echo -e "$BLUE Rocket launch time is: (Script start) $starttime";
echo -e "$BLUE Progress status: [ $GREEN launch$BLUE --> recon --> portscan --> brute --> web --> ssl --> report ] $NOCOLOR";

# default mode is target domain
if [ -z "$2" ]; then echo -e "$BLUE Targetmode domain engaged by default."; targetmode="domain"; else targetmode="$2"; fi;

# IPs CIDR mode instead of standard domain enum, currently in dev
if [ "$targetmode" == "ip" ]; then targetmode="ip"; echo -e "$ORANGE [IP mode] $BLUE ON, we will try to recon IPs instead of domain name"; iprecon; fi;
# regex IP check
# TODO regex test if target is a domain, a company name or an ip / cidr and remove this argument

# selecting the mode
# need better logic here


if [ "$targetmode" == "domain" ]; then
# check if domain provided is not a domain regex test
 if (! echo "$1" | grep -E  '(([[:alpha:]](-?[[:alnum:]])*)\.)*[[:alpha:]](-?[[:alnum:]])+\.[[:alpha:]]{2,}$'); then echo -e "$RED Sorry but $ORANGE $1 $RED is not a valid domain."; exit 1; fi;
# set MODE
scanmode="default";
# EXTENDED mode
 if [ "$3" == "extended" ]; then echo -e "$ORANGE[EXTENDED]$BLUE mode, this rocket will hit will everything at once ! KABOOM ! It will be long."; scanmode="extended"; fi;
# STEALTH mode
 if [ "$3" == "stealth" ]; then echo -e "$ORANGE[STEALTH]$BLUE mode aka T0R-Rocket, rocket flies under the radars. Please note SYN and UDP is disabled so it will be much slower"; scanmode="stealth"; fi;
# FAST mode
 if [ "$3" == "fast" ]; then echo -e "$ORANGE[FAST]$BLUE mode, this rocket flies at maximum speed... It will be finished soon."; scanmode="fast"; fi;
# RECONONLY mode
 if [ "$3" == "recononly" ]; then echo -e " $ORANGE[RECONONLY]$BLUE mode, this rocket will only fly over your target and give you intel." ; scanmode="recononly"; fi;
# REPORTONLY mode
 if [ "$3" == "reportonly" ]; then report; exit 0; fi;
# USER ASSISTED mode
 if [ "$3" == "userassisted" ]; then userassisted; exit 0; fi;
#start recon domain function
domainrecon;

fi;
# end mode select

echo -e "$BLUE Progress status: [ $GREEN launch --> recon $BLUE--> portscan --> brute --> web --> ssl --> report ] $NOCOLOR";

# finishing recon if mode recon
if [ "$scanmode" == "recononly" ] ; then
echo -e "$ORANGE [RECONONLY] $BLUE mode so I stop here.";
echo -e "$BLUE Rocket launch time was: (Script start) $starttime";
echo -ne "$BLUE Rocket lost signal time is: (Script end) ";
date;
exit 1;
fi;


echo -e "$BLUE Starting portscan";
portscan;

echo -e "$BLUE Progress status: [ $RED launch --> recon --> portscan $BLUE--> web --> brute --> ssl --> report ] $NOCOLOR";

# WEB Scanner
if [ "$4" == "web" ]; then echo -e "$ORANGE [WEB]$BLUE Extra shooting at websites targets, this will extend the script running time by a large margin."; webscan; fi;
echo -e "$BLUE Progress status: [ $RED launch --> recon --> portscan --> web $BLUE--> brute --> ssl --> report ] $NOCOLOR";

# No Brute test
if [ ! "${11}" == "noadditionalbrute" ]; then brute; fi;

report;

echo -e "$BLUE Mission over. (Automatic pentest of domain $RED $domainattacked $BLUE finished)";
echo -e "$BLUE Rocket launch time was: (Script start) $starttime";
echo -e "$RED Rocket has hit your target at time (Script end time): '$(date)' ";

########################## END MAIN FUNCTION


### END
